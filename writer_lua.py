#! python
# -*- coding:utf-8 -*-

import os
import json
from datetime import datetime

try:
    basestring
except NameError:
    basestring = str

BASE_INDENT = "    "

class Writer:

    def __init__(self,types,fields,rows):
        self.types  = types
        self.fields = fields
        self.rows   = rows
        self.indent = {}

    def suffix(self):
        return ".lua"

    def indent_ctx( self,indent ):
        if indent <= 0: return ""

        if indent not in self.indent:
            ctx = BASE_INDENT*indent
            self.indent[indent] = ctx

        return self.indent[indent]

    def is_int(s):
        try: 
            int(s)
            return True
        except ValueError:
            return False

    def comment(self):
        now = datetime.now()
        comment = '--[[\n'
        comment += 'Do NOT MODITY!  Auto generated by py_exceltools\n'
        comment += 'https://www.python.org/\n'
        comment += 'http://www.python-excel.org/\n'
        comment += ']]\n\n'
        comment += '-- At ' + now.strftime('%Y-%m-%d %H:%M:%S') + '\n\n'
        return comment

    def json_ctx(self,value,indent):
        json_obj = json.loads( value )
        print( type(json_obj) )

        ctx = value
        indent_str = self.indent_ctx( indent )
        next_indent_str = self.indent_ctx( indent + 1 )
        return "\n" + indent_str + "{\n" + next_indent_str + ctx + "\n" + indent_str + "}"

    def value_to_str(self,value_type,value,indent):
        if "int" == value_type :
            return str( int( value ) )
        elif "int64" == value_type :
            # 两次转换保证为数字
            return str( long( value ) )
        elif "number" == value_type :
            # 去除带小数时的小数点，100.0 ==>> 100
            if long( value ) == float( value ) : return str( long( value ) )
            return str( float( value ) )
        elif "string" == value_type :
            return "'" + value + "'"
        elif "json" == value_type :
            return self.json_ctx( value,indent )
        else :
            raise Exception( "invalid type",value_type )

    def pair_to_str(self,field_name,value_type,value,indent):
        pair_str = "['" + field_name + "'] = "
        pair_str += self.value_to_str( value_type,value,indent ) + ",\n"

        indent_str = self.indent_ctx( indent )
        return indent_str + pair_str

    def column_ctx(self,values,indent):
        key = ""
        # key可能为空
        if None != self.types[0] and None != values[0] :
            indent_str = self.indent_ctx( indent - 1 )
            key = indent_str + "[" + \
                self.value_to_str( self.types[0],values[0],indent ) + "] =\n"

        ctx = ""
        for index in range( 1,len( values ) ):
            if self.fields[index] :
                ctx += self.pair_to_str( 
                    self.fields[index],self.types[index],values[index],indent )

        return key, ctx

    def row_ctx(self):
        ctx = ""
        indent_str = self.indent_ctx( 1 )
        for column_values in self.rows :
            key,col_ctx = self.column_ctx( column_values,2 )

            ctx += indent_str + key + "{\n" + col_ctx + indent_str + "},\n"

        return ctx


    def content(self):
        ctx = self.comment() + "return \n{\n" + self.row_ctx() + "}"
        return ctx